# coding: utf-8

"""
    码云 Open API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gitee.configuration import Configuration


class IssueCreateParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'repo': 'str',
        'title': 'str',
        'issu_type': 'str',
        'body': 'str',
        'assignee': 'str',
        'milestone': 'int',
        'labels': 'str',
        'program': 'str',
        'collaborators': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'repo': 'repo',
        'title': 'title',
        'issu_type': 'issu_type',
        'body': 'body',
        'assignee': 'assignee',
        'milestone': 'milestone',
        'labels': 'labels',
        'program': 'program',
        'collaborators': 'collaborators'
    }

    def __init__(self, access_token=None, repo=None, title=None, issu_type=None, body=None, assignee=None, milestone=None, labels=None, program=None, collaborators=None, _configuration=None):  # noqa: E501
        """IssueCreateParam - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_token = None
        self._repo = None
        self._title = None
        self._issu_type = None
        self._body = None
        self._assignee = None
        self._milestone = None
        self._labels = None
        self._program = None
        self._collaborators = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if repo is not None:
            self.repo = repo
        if title is not None:
            self.title = title
        if issu_type is not None:
            self.issu_type = issu_type
        if body is not None:
            self.body = body
        if assignee is not None:
            self.assignee = assignee
        if milestone is not None:
            self.milestone = milestone
        if labels is not None:
            self.labels = labels
        if program is not None:
            self.program = program
        if collaborators is not None:
            self.collaborators = collaborators

    @property
    def access_token(self):
        """Gets the access_token of this IssueCreateParam.  # noqa: E501

        用户授权码  # noqa: E501

        :return: The access_token of this IssueCreateParam.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this IssueCreateParam.

        用户授权码  # noqa: E501

        :param access_token: The access_token of this IssueCreateParam.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def repo(self):
        """Gets the repo of this IssueCreateParam.  # noqa: E501

        仓库路径(path)  # noqa: E501

        :return: The repo of this IssueCreateParam.  # noqa: E501
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this IssueCreateParam.

        仓库路径(path)  # noqa: E501

        :param repo: The repo of this IssueCreateParam.  # noqa: E501
        :type: str
        """

        self._repo = repo

    @property
    def title(self):
        """Gets the title of this IssueCreateParam.  # noqa: E501

        Issue标题  # noqa: E501

        :return: The title of this IssueCreateParam.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IssueCreateParam.

        Issue标题  # noqa: E501

        :param title: The title of this IssueCreateParam.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def issu_type(self):
        """Gets the issu_type of this IssueCreateParam.  # noqa: E501

        企业自定义任务类型，非企业默认任务类型为“任务”  # noqa: E501

        :return: The issu_type of this IssueCreateParam.  # noqa: E501
        :rtype: str
        """
        return self._issu_type

    @issu_type.setter
    def issu_type(self, issu_type):
        """Sets the issu_type of this IssueCreateParam.

        企业自定义任务类型，非企业默认任务类型为“任务”  # noqa: E501

        :param issu_type: The issu_type of this IssueCreateParam.  # noqa: E501
        :type: str
        """

        self._issu_type = issu_type

    @property
    def body(self):
        """Gets the body of this IssueCreateParam.  # noqa: E501

        Issue描述  # noqa: E501

        :return: The body of this IssueCreateParam.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this IssueCreateParam.

        Issue描述  # noqa: E501

        :param body: The body of this IssueCreateParam.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def assignee(self):
        """Gets the assignee of this IssueCreateParam.  # noqa: E501

        Issue负责人的username  # noqa: E501

        :return: The assignee of this IssueCreateParam.  # noqa: E501
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this IssueCreateParam.

        Issue负责人的username  # noqa: E501

        :param assignee: The assignee of this IssueCreateParam.  # noqa: E501
        :type: str
        """

        self._assignee = assignee

    @property
    def milestone(self):
        """Gets the milestone of this IssueCreateParam.  # noqa: E501

        里程碑序号  # noqa: E501

        :return: The milestone of this IssueCreateParam.  # noqa: E501
        :rtype: int
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this IssueCreateParam.

        里程碑序号  # noqa: E501

        :param milestone: The milestone of this IssueCreateParam.  # noqa: E501
        :type: int
        """

        self._milestone = milestone

    @property
    def labels(self):
        """Gets the labels of this IssueCreateParam.  # noqa: E501

        用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance  # noqa: E501

        :return: The labels of this IssueCreateParam.  # noqa: E501
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IssueCreateParam.

        用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance  # noqa: E501

        :param labels: The labels of this IssueCreateParam.  # noqa: E501
        :type: str
        """

        self._labels = labels

    @property
    def program(self):
        """Gets the program of this IssueCreateParam.  # noqa: E501

        项目ID  # noqa: E501

        :return: The program of this IssueCreateParam.  # noqa: E501
        :rtype: str
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this IssueCreateParam.

        项目ID  # noqa: E501

        :param program: The program of this IssueCreateParam.  # noqa: E501
        :type: str
        """

        self._program = program

    @property
    def collaborators(self):
        """Gets the collaborators of this IssueCreateParam.  # noqa: E501

        Issue协助者的个人空间地址, 以 , 分隔  # noqa: E501

        :return: The collaborators of this IssueCreateParam.  # noqa: E501
        :rtype: str
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this IssueCreateParam.

        Issue协助者的个人空间地址, 以 , 分隔  # noqa: E501

        :param collaborators: The collaborators of this IssueCreateParam.  # noqa: E501
        :type: str
        """

        self._collaborators = collaborators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueCreateParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueCreateParam):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IssueCreateParam):
            return True

        return self.to_dict() != other.to_dict()
