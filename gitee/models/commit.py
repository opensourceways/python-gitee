# coding: utf-8

"""
    码云 Open API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gitee.models.user_basic import UserBasic  # noqa: F401,E501


class Commit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'tree_id': 'str',
        'parent_ids': 'list[str]',
        'message': 'str',
        'timestamp': 'datetime',
        'url': 'str',
        'author': 'UserBasic',
        'committer': 'UserBasic',
        'distinct': 'bool',
        'added': 'list[str]',
        'removed': 'list[str]',
        'modified': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'tree_id': 'tree_id',
        'parent_ids': 'parent_ids',
        'message': 'message',
        'timestamp': 'timestamp',
        'url': 'url',
        'author': 'author',
        'committer': 'committer',
        'distinct': 'distinct',
        'added': 'added',
        'removed': 'removed',
        'modified': 'modified'
    }

    def __init__(self, id=None, tree_id=None, parent_ids=None, message=None, timestamp=None, url=None, author=None, committer=None, distinct=None, added=None, removed=None, modified=None):  # noqa: E501
        """Commit - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._tree_id = None
        self._parent_ids = None
        self._message = None
        self._timestamp = None
        self._url = None
        self._author = None
        self._committer = None
        self._distinct = None
        self._added = None
        self._removed = None
        self._modified = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if tree_id is not None:
            self.tree_id = tree_id
        if parent_ids is not None:
            self.parent_ids = parent_ids
        if message is not None:
            self.message = message
        if timestamp is not None:
            self.timestamp = timestamp
        if url is not None:
            self.url = url
        if author is not None:
            self.author = author
        if committer is not None:
            self.committer = committer
        if distinct is not None:
            self.distinct = distinct
        if added is not None:
            self.added = added
        if removed is not None:
            self.removed = removed
        if modified is not None:
            self.modified = modified

    @property
    def id(self):
        """Gets the id of this Commit.  # noqa: E501


        :return: The id of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Commit.


        :param id: The id of this Commit.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tree_id(self):
        """Gets the tree_id of this Commit.  # noqa: E501


        :return: The tree_id of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._tree_id

    @tree_id.setter
    def tree_id(self, tree_id):
        """Sets the tree_id of this Commit.


        :param tree_id: The tree_id of this Commit.  # noqa: E501
        :type: str
        """

        self._tree_id = tree_id

    @property
    def parent_ids(self):
        """Gets the parent_ids of this Commit.  # noqa: E501


        :return: The parent_ids of this Commit.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_ids

    @parent_ids.setter
    def parent_ids(self, parent_ids):
        """Sets the parent_ids of this Commit.


        :param parent_ids: The parent_ids of this Commit.  # noqa: E501
        :type: list[str]
        """

        self._parent_ids = parent_ids

    @property
    def message(self):
        """Gets the message of this Commit.  # noqa: E501


        :return: The message of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Commit.


        :param message: The message of this Commit.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def timestamp(self):
        """Gets the timestamp of this Commit.  # noqa: E501


        :return: The timestamp of this Commit.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Commit.


        :param timestamp: The timestamp of this Commit.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def url(self):
        """Gets the url of this Commit.  # noqa: E501


        :return: The url of this Commit.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Commit.


        :param url: The url of this Commit.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def author(self):
        """Gets the author of this Commit.  # noqa: E501


        :return: The author of this Commit.  # noqa: E501
        :rtype: UserBasic
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Commit.


        :param author: The author of this Commit.  # noqa: E501
        :type: UserBasic
        """

        self._author = author

    @property
    def committer(self):
        """Gets the committer of this Commit.  # noqa: E501


        :return: The committer of this Commit.  # noqa: E501
        :rtype: UserBasic
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this Commit.


        :param committer: The committer of this Commit.  # noqa: E501
        :type: UserBasic
        """

        self._committer = committer

    @property
    def distinct(self):
        """Gets the distinct of this Commit.  # noqa: E501


        :return: The distinct of this Commit.  # noqa: E501
        :rtype: bool
        """
        return self._distinct

    @distinct.setter
    def distinct(self, distinct):
        """Sets the distinct of this Commit.


        :param distinct: The distinct of this Commit.  # noqa: E501
        :type: bool
        """

        self._distinct = distinct

    @property
    def added(self):
        """Gets the added of this Commit.  # noqa: E501


        :return: The added of this Commit.  # noqa: E501
        :rtype: list[str]
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this Commit.


        :param added: The added of this Commit.  # noqa: E501
        :type: list[str]
        """

        self._added = added

    @property
    def removed(self):
        """Gets the removed of this Commit.  # noqa: E501


        :return: The removed of this Commit.  # noqa: E501
        :rtype: list[str]
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this Commit.


        :param removed: The removed of this Commit.  # noqa: E501
        :type: list[str]
        """

        self._removed = removed

    @property
    def modified(self):
        """Gets the modified of this Commit.  # noqa: E501


        :return: The modified of this Commit.  # noqa: E501
        :rtype: list[str]
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Commit.


        :param modified: The modified of this Commit.  # noqa: E501
        :type: list[str]
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Commit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Commit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
