# coding: utf-8

"""
    码云 Open API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gitee.configuration import Configuration


class ProjectMemberPutParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'permission': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'permission': 'permission'
    }

    def __init__(self, access_token=None, permission='push', _configuration=None):  # noqa: E501
        """ProjectMemberPutParam - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_token = None
        self._permission = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if permission is not None:
            self.permission = permission

    @property
    def access_token(self):
        """Gets the access_token of this ProjectMemberPutParam.  # noqa: E501

        用户授权码  # noqa: E501

        :return: The access_token of this ProjectMemberPutParam.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ProjectMemberPutParam.

        用户授权码  # noqa: E501

        :param access_token: The access_token of this ProjectMemberPutParam.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def permission(self):
        """Gets the permission of this ProjectMemberPutParam.  # noqa: E501

        成员权限: 拉代码(pull)，推代码(push)，管理员(admin)。默认: push  # noqa: E501

        :return: The permission of this ProjectMemberPutParam.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ProjectMemberPutParam.

        成员权限: 拉代码(pull)，推代码(push)，管理员(admin)。默认: push  # noqa: E501

        :param permission: The permission of this ProjectMemberPutParam.  # noqa: E501
        :type: str
        """
        allowed_values = ["pull", "push", "admin"]  # noqa: E501
        if (self._configuration.client_side_validation and
                permission not in allowed_values):
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"  # noqa: E501
                .format(permission, allowed_values)
            )

        self._permission = permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectMemberPutParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectMemberPutParam):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectMemberPutParam):
            return True

        return self.to_dict() != other.to_dict()
