# coding: utf-8

"""
    码云 Open API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gitee.configuration import Configuration


class CreateBranchParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'refs': 'str',
        'branch_name': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'refs': 'refs',
        'branch_name': 'branch_name'
    }

    def __init__(self, access_token=None, refs=None, branch_name=None, _configuration=None):  # noqa: E501
        """CreateBranchParam - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_token = None
        self._refs = None
        self._branch_name = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if refs is not None:
            self.refs = refs
        if branch_name is not None:
            self.branch_name = branch_name

    @property
    def access_token(self):
        """Gets the access_token of this CreateBranchParam.  # noqa: E501

        用户授权码  # noqa: E501

        :return: The access_token of this CreateBranchParam.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this CreateBranchParam.

        用户授权码  # noqa: E501

        :param access_token: The access_token of this CreateBranchParam.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def refs(self):
        """Gets the refs of this CreateBranchParam.  # noqa: E501

        分支起点名称，默认master  # noqa: E501

        :return: The refs of this CreateBranchParam.  # noqa: E501
        :rtype: str
        """
        return self._refs

    @refs.setter
    def refs(self, refs):
        """Sets the refs of this CreateBranchParam.

        分支起点名称，默认master  # noqa: E501

        :param refs: The refs of this CreateBranchParam.  # noqa: E501
        :type: str
        """

        self._refs = refs

    @property
    def branch_name(self):
        """Gets the branch_name of this CreateBranchParam.  # noqa: E501

        新创建的分支名称  # noqa: E501

        :return: The branch_name of this CreateBranchParam.  # noqa: E501
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this CreateBranchParam.

        新创建的分支名称  # noqa: E501

        :param branch_name: The branch_name of this CreateBranchParam.  # noqa: E501
        :type: str
        """

        self._branch_name = branch_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBranchParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBranchParam):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateBranchParam):
            return True

        return self.to_dict() != other.to_dict()
