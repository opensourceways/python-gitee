# coding: utf-8

"""
    码云 Open API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5.3.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from gitee.configuration import Configuration


class GitCommit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'author': 'GitUser',
        'committer': 'GitUser',
        'message': 'str',
        'comment_count': 'int'
    }

    attribute_map = {
        'url': 'url',
        'author': 'author',
        'committer': 'committer',
        'message': 'message',
        'comment_count': 'comment_count'
    }

    def __init__(self, url=None, author=None, committer=None, message=None, comment_count=None, _configuration=None):  # noqa: E501
        """GitCommit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url = None
        self._author = None
        self._committer = None
        self._message = None
        self._comment_count = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if author is not None:
            self.author = author
        if committer is not None:
            self.committer = committer
        if message is not None:
            self.message = message
        if comment_count is not None:
            self.comment_count = comment_count

    @property
    def url(self):
        """Gets the url of this GitCommit.  # noqa: E501


        :return: The url of this GitCommit.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GitCommit.


        :param url: The url of this GitCommit.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def author(self):
        """Gets the author of this GitCommit.  # noqa: E501


        :return: The author of this GitCommit.  # noqa: E501
        :rtype: GitUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this GitCommit.


        :param author: The author of this GitCommit.  # noqa: E501
        :type: GitUser
        """

        self._author = author

    @property
    def committer(self):
        """Gets the committer of this GitCommit.  # noqa: E501


        :return: The committer of this GitCommit.  # noqa: E501
        :rtype: GitUser
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this GitCommit.


        :param committer: The committer of this GitCommit.  # noqa: E501
        :type: GitUser
        """

        self._committer = committer

    @property
    def message(self):
        """Gets the message of this GitCommit.  # noqa: E501


        :return: The message of this GitCommit.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GitCommit.


        :param message: The message of this GitCommit.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def comment_count(self):
        """Gets the comment_count of this GitCommit.  # noqa: E501


        :return: The comment_count of this GitCommit.  # noqa: E501
        :rtype: int
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this GitCommit.


        :param comment_count: The comment_count of this GitCommit.  # noqa: E501
        :type: int
        """

        self._comment_count = comment_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GitCommit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GitCommit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GitCommit):
            return True

        return self.to_dict() != other.to_dict()
